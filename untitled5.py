# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sudwV8Xdksl2ExTf4X4tKTmyroP7F0na

# **Proyek Pertama: Predictive Analytics - Prediksi Biaya Asuransi**

# 1. Pendahuluan (Problem Domain)
'''
Permasalahan: Memprediksi biaya asuransi kesehatan berdasarkan faktor usia, jenis kelamin, BMI, jumlah anak, status merokok, dan wilayah tempat tinggal.
Manfaat: Membantu perusahaan asuransi dan individu dalam memproyeksikan biaya asuransi secara akurat.
'''

# **2. Import**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

"""Import library dilakukan untuk mempermudah proses pengolahan data, visualisasi, pembuatan model machine learning, dan evaluasi hasil.

# Load dataset
"""

url = "https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv"
data = pd.read_csv(url)
data.head()

"""Load Dataset, jadi kita mencari dataset dan dimasukan ke notebook untuk di analisis dan df.head, menampilkan 5 data ter-atas

# **3. Data Preparation**
"""

# Mengecek missing values
data.isnull().sum()

"""Dilakukan pengecekan nilai kosong pada dataset.
Jika ditemukan missing value, dapat diatasi dengan:

Mengisi nilai kosong dengan mean, median, atau modus

Atau menghapus baris data kosong jika jumlahnya sangat kecil.
Dalam dataset ini, tidak ditemukan missing values.
"""

# Encode variabel kategorikal dengan one-hot encoding
encoded_data = pd.get_dummies(data, drop_first=True)

"""Variabel kategorikal diubah menjadi bentuk numerik menggunakan one-hot encoding dengan drop_first=True untuk menghindari dummy variable trap."""

# Scaling fitur numerik menggunakan StandardScaler
scaler = StandardScaler()
scaled_features = scaler.fit_transform(encoded_data.drop('charges', axis=1))
X = pd.DataFrame(scaled_features, columns=encoded_data.drop('charges', axis=1).columns)
y = encoded_data['charges']

"""Fitur numerik di-scaling agar memiliki mean 0 dan standar deviasi 1 menggunakan StandardScaler.
Hal ini dilakukan agar model dapat belajar secara optimal tanpa bias terhadap fitur dengan skala besar.
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Dataset dibagi menjadi 80% data training dan 20% data testing dengan train_test_split().
Parameter random_state=42 digunakan untuk memastikan hasil pembagian data konsisten setiap kali dijalankan.

# **EDA**

Pada tahap ini dilakukan eksplorasi data untuk mengetahui pola dan hubungan antar variabel yang dapat memengaruhi biaya asuransi (`charges`).
"""

# Melihat distribusi biaya asuransi
plt.figure(figsize=(8,5))
sns.histplot(data['charges'], kde=True, color='skyblue')
plt.title('Distribusi Biaya Asuransi (Charges)')
plt.xlabel('Charges')
plt.ylabel('Frekuensi')
plt.show()

numerical_cols = data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(8,5))
sns.heatmap(data[numerical_cols].corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi Variabel Numerik')
plt.show()

# Biaya asuransi berdasarkan status merokok
plt.figure(figsize=(6,5))
sns.boxplot(x='smoker', y='charges', data=data, palette='Set2')
plt.title('Biaya Asuransi Berdasarkan Status Perokok')
plt.show()

# Hubungan antara usia dan biaya asuransi, dengan warna berdasarkan smoker
plt.figure(figsize=(8,5))
sns.scatterplot(x='age', y='charges', hue='smoker', data=data, palette='coolwarm', alpha=0.7)
plt.title('Usia vs. Biaya Asuransi dengan Warna Status Perokok')
plt.show()

"""#### Insight dari Hasil EDA:
- Distribusi biaya asuransi (`charges`) terlihat **skewed ke kanan**, menunjukkan ada outlier dengan biaya tinggi.
- Korelasi yang cukup kuat ditemukan antara **age**, **BMI**, dan **smoker** dengan `charges`.
- **Perokok (smoker = yes)** memiliki biaya asuransi jauh lebih tinggi daripada non-perokok.
- Usia juga menunjukkan hubungan positif — semakin tua, semakin tinggi biaya asuransi, terutama jika disertai dengan status perokok.
- Variabel **region** tidak menunjukkan pengaruh yang signifikan.
#### Insight dari Hasil EDA:
- Distribusi biaya asuransi (`charges`) terlihat **skewed ke kanan**, menunjukkan ada outlier dengan biaya tinggi.
- Korelasi yang cukup kuat ditemukan antara **age**, **BMI**, dan **smoker** dengan `charges`.
- **Perokok (smoker = yes)** memiliki biaya asuransi jauh lebih tinggi daripada non-perokok.
- Usia juga menunjukkan hubungan positif — semakin tua, semakin tinggi biaya asuransi, terutama jika disertai dengan status perokok.
- Variabel **region** tidak menunjukkan pengaruh yang signifikan.

## **4. Modeling**
"""

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

"""Linear Regression digunakan untuk memodelkan hubungan linear antara variabel input (X) dan target (y).
Model dilatih pada data train, kemudian digunakan untuk memprediksi data test.

"""

# Random Forest
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

"""Random Forest model berbasis ensemble yang menggabungkan banyak decision tree untuk menghasilkan prediksi yang lebih stabil dan akurat.
Penggunaan random_state=42 untuk hasil yang konsisten.
"""

# XGBoost
xgb = XGBRegressor(random_state=42)
xgb.fit(X_train, y_train)
y_pred_xgb = xgb.predict(X_test)

"""XGBoost algoritma boosting yang terkenal karena kecepatan dan performanya.
Model dilatih dengan teknik boosting untuk memperbaiki kesalahan dari model-model sebelumnya.

## **5. Evaluasi**
"""

models = {'Linear Regression': y_pred_lr,
          'Random Forest': y_pred_rf,
          'XGBoost': y_pred_xgb}

for name, pred in models.items():
    mae = mean_absolute_error(y_test, pred)
    mse = mean_squared_error(y_test, pred)
    r2 = r2_score(y_test, pred)
    print(f"Model: {name}")
    print(f"MAE: {mae:.2f}")
    print(f"MSE: {mse:.2f}")
    print(f"R² Score: {r2:.4f}\n")

"""Pada tahap evaluasi, model yang sudah dibuat akan diuji menggunakan data test.
Evaluasi dilakukan menggunakan metrik berikut:

MAE (Mean Absolute Error): Rata-rata selisih absolut antara nilai aktual dan prediksi. Semakin kecil semakin baik.

MSE (Mean Squared Error): Rata-rata kuadrat error; memperbesar penalti untuk kesalahan besar.

R² Score (R-Squared): Seberapa baik model menjelaskan variabilitas data. Nilai mendekati 1 berarti model sangat baik.

# **6. Visualisasi Hasil**
"""

plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred_xgb, alpha=0.5, color='blue')
plt.xlabel("Biaya Asuransi Aktual")
plt.ylabel("Prediksi Biaya Asuransi")
plt.title("Prediksi Biaya Asuransi Menggunakan XGBoost")
plt.show()

"""Visualisasi ini digunakan untuk membandingkan nilai aktual dan nilai prediksi biaya asuransi menggunakan model terbaik (XGBoost).
Scatter plot membantu melihat seberapa dekat hasil prediksi terhadap garis ideal (prediksi = aktual).

Dari scatter plot terlihat bahwa sebagian besar titik menyebar mengikuti garis diagonal, artinya prediksi cukup dekat dengan nilai aktual.
Namun masih terdapat beberapa penyebaran (outlier) terutama di nilai yang lebih besar. Ini wajar dan menunjukkan model sudah cukup baik memprediksi, tapi bisa ditingkatkan dengan tuning parameter atau data yang lebih banyak.

# **7. Kesimpulan**

- Model Random Forest menunjukkan performa terbaik dengan R² tertinggi dan kesalahan prediksi paling kecil.

- Model ini dapat digunakan untuk membantu estimasi biaya asuransi bagi perusahaan maupun individu.

- Dapat ditingkatkan dengan menambahkan fitur eksternal seperti riwayat medis dan faktor risiko tambahan.
"""

